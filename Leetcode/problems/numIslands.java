import java.util.*;class Solution {    public static int numIslands(char[][] grid) {        if (grid.length == 0) return 0;        boolean[][] visited = new boolean[grid.length][grid[0].length];        int count = 0;        for (int i = 0; i < grid.length; i++){            for (int j = 0; j < grid[0].length; j++){                if (grid[i][j] == '1' && !visited[i][j]){                    count += dfs(grid, visited, i, j);                }            }        }        return count;    }    static int dfs(char[][] arr, boolean[][] visited, int row, int col) {        if (row < 0 || row == arr.length || col < 0 || col == arr[0].length ||                visited[row][col] || arr[row][col] == '0') return 0;        visited[row][col] = true;        // System.out.println(Arrays.deepToString(visited));        int[] modRow = {1, 0, -1, 0};        int[] modCol = {0, 1, 0, -1};        for (int i = 0; i < modCol.length; i++){            dfs(arr, visited, row + modRow[i], col + modCol[i]);        }        return 1;    }    public static void main(String[] args) {        char[][] arr = {{'1','1','1','1','0'},{'1','1','0','1','0'},{'1','1','0','0','0'},{'0','0','0','0','0'}};        System.out.println(numIslands(arr));    }}